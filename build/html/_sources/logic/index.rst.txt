================================================================
論理学
================================================================

https://abelard.flet.keio.ac.jp/person/mitsu/pdf/nyumon_logic.pdf

https://fuchino.ddo.jp/kobe/predicate-logic-ss11.pdf

https://wiis.info/math/logic/propositional-logic/

命題論理
================================================================
命題とは、物事の判断について述べた文や式で、正しいか正しくないかを客観的に判断できるもののこと。


命題論理の形式言語のボキャブラリー
----------------------------------------------------------------
命題論理の形式言語のボキャブラリーは、論理記号、命題変項、命題定項の3つからなる。
命題変項及び命題定項は単文を表し、論理記号は文と文をつなぐ接続詞の役割を果たすことが後に示される。

* 命題定項: true, false
* 命題変項: P, Q, R, ...
* 論理記号: and, or, not, if...then..., if and only if

1. and :math:`\land`
2. or :math:`\lor`
3. not :math:`\lnot`
4. if...then... :math:`\rightarrow`
5. if and only if :math:`\leftrightarrow`
6. true :math:`\top`
7. false :math:`\bot` 

命題論理における論理式(文法)
----------------------------------------------------------------
1. 命題変項は論理式である。
2. 命題定項は論理式である。
3. もし、 :math:`A` が論理式であるならば、 :math:`(\lnot A)` も論理式である。
4. もし、 :math:`A,B` がともに論理式であるならば、 :math:`(A\land B),(A\lor B)` は、それぞれ論理式である。
5. 以上で論理式とわかるものだけを論理式とする。

論理式の解釈
----------------------------------------------------------------


論理式の真理値
----------------------------------------------------------------
1. 命題定項 :math:`\top` は、trueという真理値を常に持つ。
2. 命題定項 :math:`\bot` は、falseという真理値を常に持つ。
3. 命題変項 :math:`P` は、trueおよびfalseを値として取り得る変項である。
4. 論理式 :math:`A\land B` がtrueであるのは、 :math:`A` がtrue かつ :math:`B` がtrueである時に限る。
5. 論理式 :math:`A\lor B` がtrueであるのは、 :math:`A` がtrue または :math:`B` がtrueである時に限る。
6. 論理式 :math: `\lnot A` がtrueであるのは、 :math:`A` がfalseである時に限る。
7. 論理式 :math:`A\rightarrow B` がtrueであるのは、 :math:`A` がtrueであれば :math:`B` がtrueであること、すなわち、 :math:`A` がfalseであるか :math:`B` がtrueとなることである。
8. 論理式 :math:`A\leftrightarrow B` がtrueであるのは、 :math:`A` と :math:`B` が同じ真理値を取るときに限る。

トートロジー
----------------------------------------------------------------
全ての命題変項の可能な真理値に対して、常にtrueとなるような論理式はトートロジーと呼ばれる。

必要・十分条件
----------------------------------------------------------------

同値変形
----------------------------------------------------------------
論理式 :math:`A` を任意に選んだ時、論理式 :math:`A\leftrightarrow A` は恒真式であるため、

.. math::
    A\Leftrightarrow A

が成り立ち、 :math:`\Leftrightarrow` が満たす関係を反射律と呼ぶ。

任意の論理式 :math:`A,B` について、 :math:`A\Leftrightarrow B` が成り立つ時、 :math:`B\Leftrightarrow A` も成り立つ。 :math:`\Leftrightarrow` が満たすこのような性質を対称律と呼ぶ。

推移律

同値変形の説明

命題論理における推論規則
----------------------------------------------------------------
推論とは、前提に相当する有限個の論理式 :math:`A_1,\cdots,A_n` がすべて真であるような任意の解釈において、結論に相当する論理式 :math:`B` が必ず真になるという主張であり、これを

.. math::
    A_1,\cdots,A_n \therefore B

と表し、推論式と呼ぶ。

前提を持たず結論 :math:`B` だけを持つ推論式を

.. math::
    \therefore B

と記述し、これは論理式 :math:`B` がトートロジーであるという主張を表す。


前提 :math:`A_1,\cdots,A_n` がすべて真であるような任意の解釈において、結論 :math:`B` が必ず真であることが保証される場合、その推論は妥当であるといい、

.. math::
    A_1,\cdots,A_n \vDash B

と表し、これを推論規則という。

前提を持たず結論 :math:`B` だけを持つ推論が妥当であることを、

.. math::
    \vDash B

と記述し、これは論理式 :math:`B` がトートロジーであることを意味する。

証明
----------------------------------------------------------------
前提 :math:`A_1,\cdots,A_n` であり結論が :math:`B` であるような推論に対し、以下の条件を満たす論理式の有限列 :math:`\alpha_1\cdots,\alpha_m` が存在する場合には、これは前提 :math:`A_1,\cdots,A_n` から結論 :math:`B` への証明や演繹と呼ぶ。

1. :math:`\alpha_m =B`
2. それぞれの :math:`i(1\leq i\leq m)` について以下のどちらかが成り立つ
 1. 論理式 :math:`\alpha_i` は前提 :math:`A_1,\cdots,A_n` のいずれかである
 2. 論理式 :math:`\alpha_i` はそれより前にある論理式に同値変形の法則や推論規則を適用して得られるものである



述語論理(一階述語論理)
================================================================
未知の数・対象を表す文字や記号のことを変数という。一般に、変数を含む文や式を命題関数とよぶ。

命題関数
----------------------------------------------------------------
命題関数とは変数を含む文や式のこと。

未知の数・対象を表す文字や記号のことを変数と呼ぶ。通常、変数はアルファベットの小文字(例えば :math:`x` )で表す。
述語論理においては対象変数とも呼ばれる。

変数 :math:`x` が取りうる値の範囲を定義域とよび、通常アルファベットの大文字(例えば :math:`X` )で表す。
:math:`x` の定義域が :math:`X` であることを明示的に表す場合は、 :math:`x\in X` のように表記する。
:math:`X` の中には :math:`x` が取りうる全ての値が含まれているが、それらの個々の値を対象定数という。
ただし誤解の恐れがない限りにおいて、対象定数を定数、値と呼ぶこととする。

「変数 :math:`x\in X` 」という場合の :math:`x\in X` は、変数 :math:`x` の定義域が :math:`X` であることを表しており、
「値 :math:`x\in X` 」という場合の :math:`x\in X` は :math:`x` が定義域 :math:`X` に属する値であることを表す。

述語論理では命題関数を :math:`P(x),Q(x),R(x),...` のように表記する。

議論の対象となる全ての変数と、それらの定義域を合わせて議論領域と呼ぶ。

論理式
----------------------------------------------------------------
量化の説明


命題関数は論理式を構成する最小単位のため、原子論理式とも呼ばれる。

議論領域 :math:`D` における論理式は以下のように定義される。


1. :math:`D` の原子論理式は :math:`D` の論理式である。
2. :math:`A` が :math:`D` の論理式であるならば、 :math:`(\lnot A)` は :math:`D` の論理式である。
3. :math:`A,B` が :math:`D` の論理式であるならば、 :math:`(A\land B),(A\lor B)` はそれぞれ :math:`D` の論理式である。
4. :math:`A` が :math:`D` の論理式であり、 :math:`x\in X` が :math:`D` の変数ならば、 :math:`(\forall x \in X:A)` は :math:`D` の論理式である。
5. :math:`A` が :math:`D` の論理式であり、 :math:`x\in X` が :math:`D` の変数ならば、 :math:`(\exists x \in X:A)` は :math:`D` の論理式である。
6. 以上で論理式とわかるものだけを論理式とする。

部分論理式の説明

変数の表れ

free,bound

閉論理式、開論理式

論理式の解釈
----------------------------------------------------------------
論理式の解釈とは、以下の3要素を具体的に特定することを意味する。

1. 議論領域 :math:`D` を指定する。すなわち、論理式 :math:`A` に含まれる変数の定義域を指定する。
2. 論理式 :math:`A` に含まれる全ての命題関数の形状を指定する。すなわち、 :math:`A` の部分論理式であるそれぞれの命題関数 :math:`P(x)` について、変数 :math:`x` の定義域 :math:`X` に属するそれぞれの値 :math:`\bar{x}` に対して、命題 :math:`P(\bar{x})` の値がtrueとfalseのどちらであるか指定する。
3. 論理式 :math:`A` が開論理式の場合、つまり :math:`A` が変数の自由な表れを持つ場合には、そこに代入する値定義域の中から指定する。

恒真式
----------------------------------------------------------------

同値変形
----------------------------------------------------------------
