1. データベースの基礎
=====================================

1.1 データ（Data）
------------------

**定義**

データとは、事実・事象・概念などを形式化した**記号列**であり、解釈主体にとって意味を持ちうる対象である。一般にデータは、構造（形式）と意味（セマンティクス）を伴う。

- 単独では意味を持たない可能性があり、文脈やスキーマによって解釈される。
- データは記録・通信・処理の対象であり、情報処理の基本単位である。

例：
- `42`, `'Alice'`, `2024-01-01` はいずれもデータであるが、構造と意味づけがなければ用途は限定される。

1.2 データモデル（Data Model）
-------------------------------

**定義**

データモデルとは、データの**構造・意味・制約・操作**を記述するための抽象的枠組みである。

- 目的は、現実世界の情報を**コンピュータ上で表現・管理・操作可能な形式**で記述すること。
- モデルには以下が含まれる：

  - 構造（Structure）：データがどのように構成されるか
  - 意味（Semantics）：データが何を意味するか
  - 制約（Constraints）：データが満たすべき条件
  - 操作（Operations）：データに対する演算（例：検索、更新、削除）

**分類**

- リレーショナルモデル（Relational Model）
- 階層モデル（Hierarchical Model）
- ネットワークモデル（Network Model）
- オブジェクト指向モデル（Object-oriented Model）
- ドキュメントモデル、グラフモデル、など

1.3 データベース（Database）
----------------------------

**定義**

データベースとは、 **あるデータモデル** に基づき、意味的整合性と永続性をもって組織化された **関連データの集合** である。

- 一貫性、一意性、再利用性、共有性を備えることが要求される。
- データベースは通常、 **スキーマ（構造）** と **インスタンス（内容）** の2層構造を持つ。

**備考**

- データベースは静的なデータの集まりではなく、動的な操作（問合せ、更新）を伴う。
- データベース管理システム（DBMS）は、この集合を効率的かつ安全に管理するためのソフトウェアシステムである。

1.4 データベース管理システム（DBMS: Database Management System）
-----------------------------------------------------------------

**定義**

DBMS とは、データベースを構成・操作・保守・制御するための **ソフトウェアシステム** である。

**機能的役割**

DBMS は、次のような機能を提供する：

- **定義機能**：スキーマやビューの定義
- **操作機能**：データの検索（問合せ）、挿入、削除、更新
- **制御機能**：
  - 整合性制約の保証
  - トランザクション管理（原子性・一貫性・独立性・永続性：ACID特性）
  - 同時実行制御
  - アクセス制御とセキュリティ
  - 障害回復（リカバリ）

**備考**

- DBMS はデータ独立性（論理・物理の独立）を実現し、アプリケーションとデータの分離を促進する。
- 代表的な DBMS：PostgreSQL, MySQL, Oracle Database, SQL Server など。

1.5 データベースシステム（DBS: Database System）
--------------------------------------------------

**定義**

DBS とは、 **データベース（データ）** と **DBMS（ソフトウェア）** 、およびそれらを運用・活用するための **ユーザーやアプリケーション** を含めた **統合的なシステム全体** を指す。

.. figure:: dbs_structure.svg
   :align: center
   :alt: DBSの構成
   :figclass: align-center

   データベースシステムの概念構成（DBS = データ + DBMS + 利用者）

**構成要素**

- **データ**：意味的に統合された構造化データの集合
- **DBMS**：操作・制御機能を提供するソフトウェア
- **アプリケーション**：DBMS を利用する業務プログラム群
- **ユーザー**：データにアクセスする主体（エンドユーザー、DB管理者など）

**備考**

- DBS は技術的構成だけでなく、利用環境・役割・責任も含む情報システムの一部とみなされる。
- 「DBMS ⊂ DBS」という包含関係が成立する。



2. スキーマとインスタンス
=========================

2.1 スキーマ（Schema）
----------------------------

**定義**

スキーマとは、データの構造を定義するメタ情報であり、対象とする世界におけるデータの種類、属性、型、関係性を記述する **設計仕様** である。

- データベースにおける「スキーマ」は、構造の青写真（blueprint）として機能する。
- スキーマは変更されにくく、 **比較的静的** な構成要素である。

例：
- リレーショナルデータベースでは、各テーブルの名前、列名、列型、制約（キー制約など）からなる。


2.2 インスタンス（Instance）
----------------------------

**定義**

インスタンスとは、定義されたスキーマに基づいて、 **ある時点で実際に存在する具体的なデータの集合** である。

- スキーマが構造を定義するのに対し、インスタンスはその構造に従った **実体（具体値）** である。
- インスタンスは運用中に **頻繁に変化** し得る動的な要素である。

例：
- スキーマで定義された「学生」テーブルにおける、ある時点の登録済みの学生レコード。

**補足**
スキーマはインスタンスの構造や制約を定義する、高次のデータと捉えることもできる。
このようなデータを **メタデータ（Metadata）** と呼ぶ。


3. 抽象化の階層
==========================

データベースシステムは、データの利用者と物理的格納構造のあいだに抽象化の階層を導入することで、柔軟な設計と保守を実現している。これは **3層スキーマアーキテクチャ** として定式化されており、以下の3レベルから構成される：

- **外部レベル（External Level）**
- **概念レベル（Conceptual Level）**
- **内部レベル（Internal Level）**

この分離により、データの定義と利用がそれぞれ独立して設計・変更できるようになる。

3.1 外部レベル（External Level）
---------------------------------

**定義**

利用者やアプリケーションがデータベースを参照・操作する際に用いる**論理的ビューの集合**である。

- 各ユーザーに対し、関心のある部分構造のみを提供する。
- 外部レベルは1つではなく、複数存在することが可能。

**外部スキーマ（External Schema）**

外部レベルに定義される個別の論理ビューのスキーマ。

3.2 概念レベル（Conceptual Level）
-----------------------------------

**定義**

データベース全体の**論理的構造**を一貫して定義するレベル。

- エンティティ、属性、関係、制約などがこのレベルで表現される。
- すべての外部スキーマは、この概念スキーマの部分集合でなければならない。

**概念スキーマ（Conceptual Schema）**

全体の整合的なデータ構造・意味・制約を記述する中心的スキーマ。

3.3 内部レベル（Internal Level）
---------------------------------

**定義**

データの**物理的格納構造**とアクセスパスを定義するレベル。

- ストレージのフォーマット、インデックス、ファイル構造などが含まれる。
- 利用者からは直接参照されない。

**内部スキーマ（Internal Schema）**

実際のデータ格納方式を記述するスキーマ。

3.4 データ独立性（Data Independence）
--------------------------------------

3層構造の意義は、下位層の変更が上位層に影響しないという**データ独立性**の確保にある。2種類の独立性が定義される：

- **論理的データ独立性（Logical Data Independence）**  
  概念スキーマの変更（例：属性の追加）が外部スキーマに影響を及ぼさない性質。

- **物理的データ独立性（Physical Data Independence）**  
  内部スキーマの変更（例：インデックスや格納方式の変更）が概念スキーマに影響を及ぼさない性質。

**備考**

- 論理的独立性は物理的独立性より実現が困難。
- データ独立性の確保により、スキーマの階層的な保守が可能となる。