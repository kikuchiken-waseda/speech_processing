=======================================
リレーショナルデータモデル（Relational Data Model）
=======================================

概要
====
リレーショナルデータモデル（Relational Data Model, RDM）は、データベースの **論理設計** において、データ構造と意味を明示的に記述するモデルである。1970年に Edgar F. Codd によって提唱された。

このモデルでは、**リレーション（relation）** と呼ばれる構造を用いてデータを管理する。リレーションは、**属性（列）** と **タプル（行）** からなる **二次元の表形式** で表される。

.. table::
   :align: center
   :widths: auto

   ==================  ======  ============
   Name                Age     Department
   ==================  ======  ============
   Alice               30      HR
   Bob                 28      Engineering
   Charlie             35      Finance
   ==================  ======  ============

このように、リレーショナルモデルでは「列＝属性」「行＝タプル」と対応づけられる。

本章では、以下の構成要素を定義する：

- 属性と定義域（Attribute and Domain）
- リレーションスキーマ（Relation Schema）
- リレーションインスタンス（Relation Instance）

1. 属性と定義域（Attribute and Domain）
========================================

**定義**

属性とは、リレーションにおける列（column）を識別する名前であり、それぞれの属性は取り得る値の集合、すなわち **定義域（ドメイン）** を持つ。

形式的には：

- :math:`D_1, D_2, \ldots, D_n` は定義域（それぞれの属性が取る値の集合）。
- :math:`A_1, A_2, \ldots, A_n` は属性。
- 各属性 :math:`A_i` は、リレーションのタプル集合 :math:`T` に対する写像として次のように定義される：

  .. math::
     A_i : T \to D_i

任意のタプル :math:`t \in T` に対して：

.. math::
   A_i(t) = v_i \in D_i

すなわち、タプル :math:`t` において、属性 :math:`A_i` が取る値は :math:`v_i \in D_i` である。

**次数（Arity）**

リレーションが持つ属性の個数 :math:`n` をその **次数（arity）** と呼ぶ。

- リレーション :math:`R` が :math:`n` 個の属性 :math:`A_1, \ldots, A_n` を持つとき、:math:`R` は次数 :math:`n` のリレーションである。
- これは、リレーションが定義される直積集合 :math:`D_1 \times \cdots \times D_n` の次元に対応する。

例：

- 属性が3つ（例：氏名、年齢、住所）の場合、そのリレーションは **次数 3** である。
- 各タプルは3つの値からなる順序付き組となる。

2. リレーションスキーマ（Relation Schema）
===========================================

**定義**

リレーションスキーマとは、リレーションにおける **構造** を定義する枠組みであり、属性とそれぞれの定義域の対応を明示する。

- 各属性 :math:`A_i` は定義域 :math:`D_i` を持つ。
- スキーマは属性名とその定義域とのペアの有限列（ordered sequence）として表現される。

形式的定義：

.. math::
   R = \{ A_1, A_2, \ldots, A_n \}

ここで：

- :math:`R` はリレーションの **名前** であり、
- :math:`A_i` は定義域 :math:`D_i` を持つ属性。

備考：

- 属性集合は順序を持つ（すなわち列の順番は意味を持つ）。
- このスキーマは、後述するリレーションインスタンスに対する制約（構造的枠組み）として機能する。

3. リレーションインスタンス（Relation Instance）
==================================================

**定義**

リレーションインスタンスとは、あるリレーションスキーマ :math:`R` に従って具体化された **有限個のタプル（行）からなる集合** である。

各タプルは、定義域の直積集合に属する要素（列ごとの値の並び）である。

形式的定義：

.. math::
   r \subseteq D_1 \times D_2 \times \cdots \times D_n

ここで：

- :math:`r` はリレーション :math:`R` に対応する具体的なタプル集合。
- 任意の :math:`t \in r` に対して、:math:`t = (v_1, v_2, \ldots, v_n)` かつ :math:`v_i \in D_i` が成り立つ。

属性関数を使えば：

.. math::
   A_i(t) = v_i \in D_i

が常に成立する。

**備考**

- リレーションスキーマ :math:`R` は構造を表し、リレーションインスタンス :math:`r` はその具体的なデータ内容を表す。
- 同じスキーマに対して、異なる複数のリレーションインスタンスが存在しうる。
- リレーションは集合として定義されるため、属性の順序には意味がない。ただし、実装や表示形式においては属性順が明示的に固定される場合がある。


4. 第一正規形と非正規リレーション
=================================

4.1 第一正規形（First Normal Form, 1NF）
----------------------------------------

**定義**

リレーション :math:`R` が **第一正規形（1NF）** にあるとは、すべての属性値が **単一のスカラ値（atomic value）** を取り、繰り返し要素を持たないときに成立する。

**形式的条件**

任意のリレーション :math:`r \subseteq D_1 \times \cdots \times D_n` において：

.. math::
   \forall t \in r, \forall i \in \{1, \ldots, n\},\ t.A_i \in D_i,\ D_i \text{ は atomic domain }

すなわち、すべての属性 :math:`A_i` に対して、定義域 :math:`D_i` が **原子的（atomic）** であること。

**正規化操作**

非正規リレーションを 1NF に変換するには：

- 多値属性を排除する。
- 繰り返し要素を分解して、別のリレーションへ正規化する。

**変換例**

非正規形：

.. table::
   :align: center
   :widths: auto

   ==========  =====================
   Name        PhoneNumbers
   ==========  =====================
   Alice       ["1234", "5678"]
   ==========  =====================

→ 第一正規形：

.. table::
   :align: center
   :widths: auto

   ==========  ============
   Name        PhoneNumber
   ==========  ============
   Alice       1234
   Alice       5678
   ==========  ============


4.2 非正規リレーション（Unnormalized Relation）
--------------------------------------------------

**定義**

非正規リレーションとは、**第一正規形（1NF）** の条件を満たしていないリレーションであり、属性に **繰り返し要素（repeating group）** や **多値属性（multivalued attribute）** を含む構造である。

**特徴**

- 属性がスカラ値ではなく、集合・リスト・配列などの構造を持つ。
- リレーションインスタンスにおいて、あるセルが単一値でない。
- 表形式として曖昧または非整合な構造となる。

**例**

.. table::
   :align: center
   :widths: auto

   ==========  ======  =====================
   Name        Age     PhoneNumbers
   ==========  ======  =====================
   Alice       30      ["1234", "5678"]
   Bob         25      ["9876"]
   ==========  ======  =====================

