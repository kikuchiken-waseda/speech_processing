==============================================================================
音声信号処理に向けたフーリエ変換の学び
==============================================================================

しっかり勉強する人は
http://www.ic.is.tohoku.ac.jp/~swk/lecture/yaruodsp/main.html
をみてください

.. contents:: 目次


フーリエ変換のお気持ち
==============================================================================
フーリエ変換は、この世の関数は(激キモ関数を除いて)三角関数の和で表せるっていうようなお考えのものです。

信号を複数の成分に分解するもの

音声信号においては時間信号を複数の周波数成分に分解するためのものと覚えておくとよい

フーリエ級数
==============================================================================
周期信号を分解するでー

フーリエ変換
==============================================================================
非周期信号も分解しちゃうでー

離散時間フーリエ変換
==============================================================================
離散値でもFTしちゃうでー

ちゃんと理解する


サンプリングするときの時間間隔をサンプリング周期や標本化周期と呼ぶ。

ここではサンプリング周期を  :math:`T_s[s]` で表す。

サンプリング周波数: :math:`f_s = 1/T_s [Hz]` 

離散信号では時間をサンプリング周期で割って正規化したものを時間として考えている。
ここではその時間を正規化時間と呼ぶこととし、正規化時間は無次元量であるが、理解のために単位として :math:`[sample]` を使うことにする。

非正規化角周波数: :math:`\Omega = 2\pi f [rad/s]`

正規化角周波数: :math:`\omega = \Omega /f_s [rad/sample]`





離散フーリエ変換
==============================================================================
音声長を :math:`t[s]` として

:math:`N = \lfloor tf_s \rfloor [sample]`

:math:`x(t)` を離散信号とする。:math:`0 \leq t \leq N-1` を満たす有限長離散信号 :math:`x(t)` の離散フーリエ変換を

.. math::
    X(k) = \sum^{N-1}_{t=0} x(t)e^{-j\frac{2\pi}{N} kt}

で表す。

離散フーリエ変換と三角関数の性質を考えれば、サンプリング定理とミラーリングの説明ができます。


離散コサイン変換
==============================================================================
DCTは信号をy軸で折り返して偶関数化してDFTすることと等価であり、実際にそう計算することが多い。

https://ja.wikipedia.org/wiki/%E9%9B%A2%E6%95%A3%E3%82%B3%E3%82%B5%E3%82%A4%E3%83%B3%E5%A4%89%E6%8F%9B

短時間フーリエ変換
==============================================================================
短い時間間隔でFTして時間構造を見ちゃうでー


:math:`x(t)` を短時間の時間区間に分割して、その周波数構造を分析するために、 :math:`0 \leq t \leq N-1` だけで0でない値を持ち、
この外では0となるような関数 :math:`w_a(t)` を :math:`x(t)` に乗じる。この :math:`w_a(t)` は分析窓関数と呼ばれる。

短時間フーリエ変換では

.. math:: 
    x_m(t-mS) = w_a(t-mS)x(t)

のように分析窓関数 :math:`w_a(t)` を :math:`mS` だけシフトして乗じることにより、
:math:`mS \leq t \leq mS+N-1` 部分を切り出し、
切り出した時間区間の先頭に時間原点を移動した有限長信号を定義する。
この時間区間、あるいは切り出された有限長信号は、時間フレームあるいは単にフレームと呼ばれ、
:math:`m` は時間フレームのインデックス、
:math:`S` はフレームシフト、
:math:`N` はフレーム長と呼ばれる。

https://www.jstage.jst.go.jp/article/jasj/72/12/72_764/_pdf