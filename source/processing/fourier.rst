==============================================================================
音声信号処理に向けたフーリエ変換の学び
==============================================================================

しっかり勉強する人は
http://www.ic.is.tohoku.ac.jp/~swk/lecture/yaruodsp/main.html
をみてください

周波数を :math:`\nu` で表そうかな

.. contents:: 目次


フーリエ変換のお気持ち
==============================================================================
フーリエ変換は、この世の関数は(激キモ関数を除いて)三角関数の和で表せるっていうようなお考えのものです。

信号を複数の成分に分解するもの

音声信号においては時間信号を複数の周波数成分に分解するためのものと覚えておくとよい

フーリエ級数展開
==============================================================================
時間軸上の周期波形を同じ周期である基本波と高調波で表すことを、波形をフーリエ級数展開するという。


周期信号を分解するでー

:math:`\Omega_0 = \frac{2\pi}{T_0}`

フーリエ係数の計算

.. math::
    F_k = \frac{1}{T_0}\int^{T_0/2}_{-T_0/2} f(t)e^{-j\Omega_0kt}dt

フーリエ級数

.. math::
    f(t) = \sum^{\infty}_{k=-\infty} F_ke^{j\Omega_0kt}


フーリエ変換
==============================================================================
非周期信号も分解しちゃうでー

.. math::
    F(\Omega) = \int^{\infty}_{-\infty} f(t)e^{-j\Omega t}dt

.. math::
    f(t) =\frac{1}{2\pi} \int^{\infty}_{-\infty} F(\Omega)e^{j\Omega t}d\Omega

.. math::
    F(\Omega) = \mathcal{F}[f(t)]

    f(t) = \mathcal{F}^{-1}[F(\Omega)]

離散時間フーリエ変換
==============================================================================
離散値でもFTしちゃうでー

ちゃんと理解する


サンプリングするときの時間間隔をサンプリング周期や標本化周期と呼ぶ。

ここではサンプリング周期を  :math:`T_s \text{[s]}` で表す。

サンプリング周波数: :math:`\nu _s = 1/T_s \text{[Hz]}` 

離散信号では時間をサンプリング周期で割って正規化したものを時間として考えている。
ここではその時間を正規化時間と呼ぶこととし、正規化時間は無次元量であるが、理解のために単位として :math:`\text{[sample]}` を使うことにする。

非正規化角周波数: :math:`\Omega = 2\pi \nu \text{[rad/s]}`

正規化角周波数: :math:`\omega = \Omega /\nu _s \text{[rad/sample]}`


.. math::
    F(\omega) = \sum^{\infty}_{n=-\infty} f[n]e^{-j\omega n}

.. math::
    f[n] =\frac{1}{2\pi} \int^{\pi}_{-\pi} F(\omega)e^{j\omega n}d\omega


離散フーリエ変換
==============================================================================
音声長を :math:`t\text{[s]}` として

:math:`N = [t\nu _s] \text{[sample]}`

:math:`f[n]` を離散信号とする。:math:`0 \leq n \leq N-1` を満たす有限長離散信号 :math:`f[n]` の離散フーリエ変換を

.. math::
    F[k] = \sum^{N-1}_{n=0} f[n]e^{-j\frac{2\pi}{N} kn}

で表す。(kで離散周波数を表してるので、離散時間フーリエ変換での表し方を考えて、書き方を考え直す)

.. math::
    f[n] = \frac{1}{N}\sum^{N-1}_{k=0} F[k]e^{j\frac{2\pi}{N} kn}


離散コサイン変換
------------------------------------------------------------------------------
DCTは信号をy軸で折り返して偶関数化してDFTすることと等価であり、実際にそう計算することが多い。

https://ja.wikipedia.org/wiki/%E9%9B%A2%E6%95%A3%E3%82%B3%E3%82%B5%E3%82%A4%E3%83%B3%E5%A4%89%E6%8F%9B







高速フーリエ変換
==============================================================================
気合が残ってたら書く


短時間フーリエ変換
==============================================================================
短い時間間隔でFTして時間構造を見ちゃうでー


:math:`f(t)` を短時間の時間区間に分割して、その周波数構造を分析するために、 :math:`0 \leq t \leq N-1` だけで0でない値を持ち、
この外では0となるような関数 :math:`w_a(t)` を :math:`f(t)` に乗じる。この :math:`w_a(t)` は分析窓関数と呼ばれる。

短時間フーリエ変換では

.. math:: 
    f_m(t-mS) = w_a(t-mS)f(t)

のように分析窓関数 :math:`w_a(t)` を :math:`mS` だけシフトして乗じることにより、
:math:`mS \leq t \leq mS+N-1` 部分を切り出し、
切り出した時間区間の先頭に時間原点を移動した有限長信号を定義する。
この時間区間、あるいは切り出された有限長信号は、時間フレームあるいは単にフレームと呼ばれ、
:math:`m` は時間フレームのインデックス、
:math:`S` はフレームシフト(hop_length)、
:math:`N` はフレーム長(win_length)と呼ばれる。

:math:`N=512, 1024, 2048` がとられることが多い

ここで　:math:`n=t-mS` と置くと、:math:`f_m(n)` は、 :math:`0 \leq t \leq N-1` でのみ :math:`0` でない値を持つ。
こうして分割された有限長信号に離散フーリエ変換を適応することで、短時間フーリエ変換

.. math::
    F(m, k) = \sum^{N-1}_{n=0} f_m(n)e^{-j\frac{2\pi}{N} kn}

が定義される。

https://www.jstage.jst.go.jp/article/jasj/72/12/72_764/_pdf

時間分解能、周波数分解能
-----------------------------------------------------------------------
Nが小さい:mがいっぱいとれる,kが全然取れない

Nがでかい:mが全然取れない,kがいっぱいとれる